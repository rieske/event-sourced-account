plugins {
    id("account.service-conventions")
    id("java-test-fixtures")
}

dependencies {
    implementation(platform(project(":platform")))

    implementation(project(":eventstore-postgres"))

    implementation("com.sparkjava:spark-core") {
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-server")
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-servlet")
        exclude(group: "org.eclipse.jetty", module: "jetty-webapp")
    }

    implementation("org.msgpack:msgpack-core")

    implementation("ch.qos.logback:logback-classic")
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("io.zipkin.brave:brave-instrumentation-sparkjava")
    implementation("io.zipkin.brave:brave-instrumentation-p6spy")
    implementation("io.zipkin.reporter2:zipkin-sender-urlconnection")

    implementation("com.zaxxer:HikariCP")

    testFixturesApi(platform(project(":platform")))
    testFixturesApi("org.junit.jupiter:junit-jupiter")
    testFixturesApi("org.assertj:assertj-core")

    testImplementation(platform(project(":platform")))
    testImplementation("com.tngtech.archunit:archunit-junit5")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("com.h2database:h2")

    e2eTestImplementation(platform(project(":platform")))
    e2eTestImplementation("org.junit.jupiter:junit-jupiter")
    e2eTestImplementation("org.assertj:assertj-core")
    e2eTestImplementation("org.testcontainers:testcontainers") {
        exclude(group: "org.slf4j", module: "slf4j-api")
    }
    e2eTestImplementation("org.slf4j:slf4j-api")
    e2eTestImplementation("org.apache.httpcomponents:httpclient")
    e2eTestImplementation("org.apache.httpcomponents:httpasyncclient")
}

application {
    mainClass.set("lt.rieske.accounts.App")
}

tasks.named("e2eTest") {
    it.dependsOn(":eventstore-postgres:integrationTest")
    it.inputs.files(jar.archiveFile, file('Dockerfile'), fileTree("../infrastructure"))
            .withPathSensitivity(PathSensitivity.RELATIVE)
}

tasks.register("stressTest", JavaExec) {
    classpath = sourceSets.e2eTest.runtimeClasspath
    main = "lt.rieske.accounts.StressTests"
}

tasks.register('asyncStressTest', JavaExec) {
    classpath = sourceSets.e2eTest.runtimeClasspath
    main = "lt.rieske.accounts.AsyncStressTests"
}
