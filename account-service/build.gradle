plugins {
    id("account.service-conventions")
    id("java-test-fixtures")
}

def eventstoreImpl = providers.gradleProperty("eventstore").forUseAtConfigurationTime().orElse("postgres")

dependencies {
    implementation(platform(project(":platform")))
    implementation(project(":eventstore-${eventstoreImpl.get()}"))

    implementation("com.sparkjava:spark-core") {
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-server")
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-servlet")
        exclude(group: "org.eclipse.jetty", module: "jetty-webapp")
    }

    implementation("org.msgpack:msgpack-core")

    implementation("ch.qos.logback:logback-classic")
    implementation("io.micrometer:micrometer-registry-prometheus")
    implementation("io.zipkin.brave:brave-instrumentation-sparkjava")
    implementation("io.zipkin.brave:brave-instrumentation-p6spy")
    implementation("io.zipkin.reporter2:zipkin-sender-urlconnection")

    implementation("com.zaxxer:HikariCP")

    testFixturesApi(platform(project(":platform")))
    testFixturesApi("org.junit.jupiter:junit-jupiter")
    testFixturesApi("org.assertj:assertj-core")

    testImplementation(platform(project(":platform")))
    testImplementation("com.tngtech.archunit:archunit-junit5")
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("com.h2database:h2")

    e2eTestImplementation(platform(project(":platform")))
    e2eTestImplementation("org.junit.jupiter:junit-jupiter")
    e2eTestImplementation("org.assertj:assertj-core")
    e2eTestImplementation("org.testcontainers:testcontainers")
    e2eTestImplementation("org.apache.httpcomponents:httpclient")
    e2eTestImplementation("org.apache.httpcomponents:httpasyncclient")
}

application {
    mainClass.set("lt.rieske.accounts.App")
}

tasks.named("e2eTest") {
    it.dependsOn(":eventstore-postgres:integrationTest")
    it.systemProperty("eventstore", eventstoreImpl.get())
    it.inputs.files(jar.archiveFile, file("Dockerfile"), fileTree("../infrastructure"))
            .withPathSensitivity(PathSensitivity.RELATIVE)
}

tasks.register("stressTest", JavaExec) {
    classpath = sourceSets.e2eTest.runtimeClasspath
    main = "lt.rieske.accounts.StressTests"
}

tasks.register("asyncStressTest", JavaExec) {
    classpath = sourceSets.e2eTest.runtimeClasspath
    main = "lt.rieske.accounts.AsyncStressTests"
}

tasks.register("composeUp", Exec) {
    it.dependsOn("build")
    def composeFile = eventstoreImpl.get() == "mysql" ? "docker-compose-mysql.yml" : "docker-compose.yml"
    it.inputs.files(file("${rootProject.projectDir}/$composeFile")).withPathSensitivity(PathSensitivity.RELATIVE)
    it.workingDir(rootProject.projectDir)
    it.executable("docker-compose")
    it.args("-f", "$composeFile", "up", "--build", "-d")
    it.doLast {
        println("\n\n")
        println("Eventstore backend: ${eventstoreImpl.get()}\n")
        println("Zipkin:\t\t\t\thttp://localhost:9411")
        println("Grafana:\t\t\thttp://localhost:3000")
        println("Prometheus:\t\t\thttp://localhost:9090")
        println("account-service (via Envoy):\thttp://localhost:8080")
    }
}

tasks.register("composeDown", Exec) {
    it.workingDir(rootProject.projectDir)
    it.executable("docker-compose")
    it.args("down")
}
