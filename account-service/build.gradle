plugins {
    id("account.service")
}

def eventstoreImpl = providers.gradleProperty("eventstore").orElse("postgres")

dependencies {
    implementation(project(":eventstore"))

    implementation(libs.sparkJava) {
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-server")
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-servlet")
        exclude(group: "org.eclipse.jetty", module: "jetty-webapp")
    }

    implementation(libs.msgpack)
    implementation(libs.logback)
    implementation(libs.micrometer)
    implementation(libs.hikari)
    implementation(libs.bundles.zipkin)

    runtimeOnly(project(":eventstore")) {
        capabilities {
            it.requireCapability("account:eventstore-${eventstoreImpl.get()}")
        }
    }

    testFixturesApi(libs.junit)
    testFixturesApi(libs.assertj)

    testImplementation(libs.archunit)
    testImplementation(libs.restAssured)
    testImplementation(libs.h2)

    e2eTestImplementation(libs.junit)
    e2eTestImplementation(libs.assertj)
    e2eTestImplementation(libs.testcontainers)
    e2eTestImplementation(libs.apacheHttpClient)
    e2eTestImplementation(libs.apacheHttpAsyncClient)
    e2eTestImplementation(libs.logback)
}

application {
    mainClass = "lt.rieske.accounts.App"
}

tasks.named("e2eTest") {
    it.dependsOn("integrationTest")
    it.systemProperty("eventstore", eventstoreImpl.get())
}

tasks.register("stressTest", JavaExec) {
    it.classpath = sourceSets.e2eTest.runtimeClasspath
    it.mainClass.set("lt.rieske.accounts.StressTests")
}

tasks.register("asyncStressTest", JavaExec) {
    it.classpath = sourceSets.e2eTest.runtimeClasspath
    it.mainClass.set("lt.rieske.accounts.AsyncStressTests")
}

tasks.register("composeUp", Exec) {
    it.dependsOn("build")
    def composeFile = eventstoreImpl.get() == "mysql" ? "docker-compose-mysql.yml" : "docker-compose.yml"
    it.inputs.files(file("${rootProject.projectDir}/$composeFile")).withPathSensitivity(PathSensitivity.RELATIVE)
    it.workingDir(rootProject.projectDir)
    it.executable("docker-compose")
    it.args("-f", "$composeFile", "up", "--build", "-d")
    it.doLast {
        println("\n\n")
        println("Eventstore backend: ${eventstoreImpl.get()}\n")
        println("Zipkin:\t\t\t\thttp://localhost:9411")
        println("Grafana:\t\t\thttp://localhost:3000")
        println("Prometheus:\t\t\thttp://localhost:9090")
        println("account-service (via Envoy):\thttp://localhost:8080")
    }
}

tasks.register("composeDown", Exec) {
    it.workingDir(rootProject.projectDir)
    it.executable("docker-compose")
    it.args("down")
}
