plugins {
    id "java"
    id "application"
}

java {
    sourceCompatibility = JavaVersion.VERSION_14
    targetCompatibility = JavaVersion.VERSION_14
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
    e2eTest
}

def integrationTest = tasks.register('integrationTest', Test) {
    it.shouldRunAfter(test)

    it.testClassesDirs = sourceSets.integrationTest.output.classesDirs
    it.classpath = sourceSets.integrationTest.runtimeClasspath
}
def e2eTest = tasks.register('e2eTest', Test) {
    it.dependsOn(assemble)
    it.shouldRunAfter(integrationTest)

    it.inputs.files(jar.archiveFile, 'Dockerfile', fileTree("infrastructure"))

    it.testClassesDirs = sourceSets.e2eTest.output.classesDirs
    it.classpath = sourceSets.e2eTest.runtimeClasspath
}
tasks.named('check') { it.dependsOn(test, integrationTest, e2eTest) }

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = 8
    jvmArgs += "--enable-preview"
}
tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}

dependencies {
    implementation("com.sparkjava:spark-core:${sparkJavaVersion}") {
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-server")
        exclude(group: "org.eclipse.jetty.websocket", module: "websocket-servlet")
        exclude(group: "org.eclipse.jetty", module: "jetty-webapp")
    }

    implementation("org.msgpack:msgpack-core:${msgpackVersion}")

    implementation("org.flywaydb:flyway-core:${flywayVersion}")

    implementation("ch.qos.logback:logback-classic:${logbackVersion}")
    implementation("io.micrometer:micrometer-registry-prometheus:${micrometerVersion}")
    implementation("io.zipkin.brave:brave-instrumentation-sparkjava:${zipkinBraveVersion}")
    implementation("io.zipkin.brave:brave-instrumentation-p6spy:${zipkinBraveVersion}")
    implementation("io.zipkin.reporter2:zipkin-sender-urlconnection:${zipkinReporterVersion}")

    implementation("com.zaxxer:HikariCP:${hikaricpVersion}")
    implementation("mysql:mysql-connector-java:${mysqlDriverVersion}") {
        exclude(group: "com.google.protobuf", module: "protobuf-java")
    }
    implementation("org.postgresql:postgresql:${postgresDriverVersion}")

    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("io.rest-assured:rest-assured:${restAssuredVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testImplementation("com.h2database:h2:${h2Version}")

    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitVersion}")
    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitVersion}") {
        exclude(group: "org.junit.platform", module: "junit-platform-engine")
    }

    integrationTestImplementation("org.testcontainers:mysql:${testcontainersVersion}") {
        exclude(group: "org.slf4j", module: "slf4j-api")
    }
    integrationTestImplementation("org.testcontainers:postgresql:${testcontainersVersion}") {
        exclude(group: "org.slf4j", module: "slf4j-api")
    }

    e2eTestImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    e2eTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    e2eTestImplementation("org.assertj:assertj-core:${assertjVersion}")
    e2eTestImplementation("org.testcontainers:testcontainers:${testcontainersVersion}") {
        exclude(group: "org.slf4j", module: "slf4j-api")
    }
    e2eTestImplementation("org.slf4j:slf4j-api:${slf4jVersion}") {
        because("there is an internal slf4j version conflict in testcontainers library")
    }
    e2eTestImplementation("org.apache.httpcomponents:httpclient:${apacheHttpClientVersion}")
}

application {
    mainClassName = "lt.rieske.accounts.App"
}
