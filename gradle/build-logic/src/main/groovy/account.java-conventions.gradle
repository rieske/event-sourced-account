plugins {
    id("internal.java")
    id("internal.jacoco")
    id("java-test-fixtures")
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.testFixtures.output
        runtimeClasspath += sourceSets.testFixtures.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom(implementation, testFixturesImplementation)
}

def integrationTest = tasks.register("integrationTest", Test) {
    it.shouldRunAfter("test")

    it.testClassesDirs = sourceSets.integrationTest.output.classesDirs
    it.classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.named("check") { it.dependsOn(integrationTest) }

// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    enabled = false
}

configurations {
    // Share sources folder with other projects for aggregated JaCoCo reports
    transitiveSourcesElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        extendsFrom(configurations.implementation)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "source-folders"))
        }
        sourceSets.main.java.srcDirs.forEach {
            outgoing.artifact(it)
        }
    }

    // Share the coverage data to be aggregated for the whole product
    coverageDataElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        extendsFrom(configurations.implementation)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "jacoco-coverage-data"))
        }
        // This will cause the test task to run if the coverage data is requested by the aggregation task
        outgoing.artifact(tasks.named("test").map { task ->
            task.extensions.getByType(JacocoTaskExtension).destinationFile
        })
        outgoing.artifact(tasks.named("integrationTest").map { task ->
            task.extensions.getByType(JacocoTaskExtension).destinationFile
        })
    }
}
