plugins {
    id("account.java-conventions")
}

sourceSets {
    postgres {
        compileClasspath += sourceSets.main.output
    }
    mysql {
        compileClasspath += sourceSets.main.output
    }
    postgresTest {
        compileClasspath += postgres.output
        runtimeClasspath += postgres.output
    }
    mysqlTest {
        compileClasspath += mysql.output
        runtimeClasspath += mysql.output
    }
    postgresIntegrationTest {
        compileClasspath += sourceSets.testFixtures.output + postgres.output
        runtimeClasspath += sourceSets.testFixtures.output + postgres.output
    }
    mysqlIntegrationTest {
        compileClasspath += sourceSets.testFixtures.output + mysql.output
        runtimeClasspath += sourceSets.testFixtures.output + mysql.output
    }
}

java {
    registerFeature("postgres") {
        usingSourceSet(sourceSets.postgres)
    }
    registerFeature("mysql") {
        usingSourceSet(sourceSets.mysql)
    }
}

configurations {
    postgresTestImplementation.extendsFrom(postgresImplementation, testImplementation)
    postgresIntegrationTestImplementation.extendsFrom(testFixturesImplementation, postgresImplementation)

    mysqlTestImplementation.extendsFrom(mysqlImplementation, testImplementation)
    mysqlIntegrationTestImplementation.extendsFrom(testFixturesImplementation, mysqlImplementation)
}

def postgresTest = tasks.register("postgresTest", Test) {
    it.testClassesDirs = sourceSets.postgresTest.output.classesDirs
    it.classpath = sourceSets.postgresTest.runtimeClasspath
}

def mysqlTest = tasks.register("mysqlTest", Test) {
    it.testClassesDirs = sourceSets.mysqlTest.output.classesDirs
    it.classpath = sourceSets.mysqlTest.runtimeClasspath
}

tasks.named("test") {
    it.dependsOn(postgresTest, mysqlTest)
}

def postgresIntegrationTest = tasks.register("postgresIntegrationTest", Test) {
    it.shouldRunAfter(postgresTest)

    it.testClassesDirs = sourceSets.postgresIntegrationTest.output.classesDirs
    it.classpath = sourceSets.postgresIntegrationTest.runtimeClasspath
}

def mysqlIntegrationTest = tasks.register("mysqlIntegrationTest", Test) {
    it.shouldRunAfter(mysqlTest)

    it.testClassesDirs = sourceSets.mysqlIntegrationTest.output.classesDirs
    it.classpath = sourceSets.mysqlIntegrationTest.runtimeClasspath
}

def integrationTest = tasks.register("integrationTest") {
    it.dependsOn(postgresIntegrationTest, mysqlIntegrationTest)
}

tasks.named("check") { it.dependsOn(integrationTest) }
