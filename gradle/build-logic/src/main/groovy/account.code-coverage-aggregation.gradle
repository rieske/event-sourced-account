plugins {
    id("account.jacoco")
    id("com.github.kt3k.coveralls")
}

configurations {
    // A resolvable configuration to collect source code
    sourcesPath {
        visible = false
        canBeResolved = true
        canBeConsumed = false
        extendsFrom(runtimeClasspath)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "source-folders"))
        }
    }

    // A resolvable configuration to collect JaCoCo coverage data
    coverageDataPath {
        visible = false
        canBeResolved = true
        canBeConsumed = false
        extendsFrom(runtimeClasspath)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "jacoco-coverage-data"))
        }
    }
}

def currentProjectTestCoverageProvider = tasks.named("test").map { task ->
    task.extensions.getByType(JacocoTaskExtension).destinationFile
}
// Task to gather code coverage from multiple subprojects
def codeCoverageReport = tasks.register("codeCoverageReport", JacocoReport) {
    it.sourceSets(sourceSets.main)
    it.additionalClassDirs(configurations.runtimeClasspath.asFileTree.filter { it.path.contains("/build/libs/") })
    it.additionalSourceDirs(configurations.sourcesPath.incoming.artifactView { it.lenient(true) }.files)
    it.executionData(configurations.coverageDataPath.incoming.artifactView { it.lenient(true) }.files.filter { it.exists() })
    it.executionData(currentProjectTestCoverageProvider)

    it.reports {
        xml.required = true
        html.required = true
    }
}

tasks.named("check") {
    it.dependsOn(codeCoverageReport)
}

coveralls {
    jacocoReportPath = "build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
}

tasks.named("coveralls") {
    doFirst {
        coveralls {
            sourceDirs += configurations.sourcesPath.incoming.artifactView { it.lenient(true) }.files.files
            sourceDirs += sourceSets.main.java.srcDirs
        }
    }
}