plugins {
    id("account.jacoco")
    id("java")
    id("java-test-fixtures")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked"]
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = 8
}

configurations {
    all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom(implementation)
}

tasks.named("check") { it.dependsOn(testing.suites.integrationTest) }

// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    enabled = false
}

configurations {
    // Share sources folder with other projects for aggregated JaCoCo reports
    transitiveSourcesElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        extendsFrom(runtimeElements)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "source-folders"))
        }
        sourceSets.main.java.srcDirs.forEach {
            outgoing.artifact(it)
        }
    }

    // Share the coverage data to be aggregated for the whole product
    coverageDataElements {
        visible = false
        canBeResolved = false
        canBeConsumed = true
        extendsFrom(implementation)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
            attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, "jacoco-coverage-data"))
        }
        // This will cause the test task to run if the coverage data is requested by the aggregation task
        outgoing.artifact(tasks.named("test").map { task ->
            task.extensions.getByType(JacocoTaskExtension).destinationFile
        })
        outgoing.artifact(tasks.named("integrationTest").map { task ->
            task.extensions.getByType(JacocoTaskExtension).destinationFile
        })
    }
}
